/*
 * Copyright 2018 Philipp Salvisberg <philipp.salvisberg@trivadis.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.utplsql.sqldev.oddgen

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.List
import org.utplsql.sqldev.dal.UtplsqlDao
import org.utplsql.sqldev.model.oddgen.GenContext

class TestTemplate {
	var GenContext context
	var UtplsqlDao dao
	var List<String> units
	var dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
	var today = dateTimeFormatter.format(LocalDateTime.now())
	
	new(GenContext context) {
		this.context = context
		dao = new UtplsqlDao(context.conn)
		units = dao.units(context.objectType, context.objectName)
	}

	def replaceTabsWithSpaces(CharSequence input) {
		val spaces = String.format("%1$"+context.indentSpaces+"s", "")
		return input.toString.replace("\t", spaces)
	}
	
	def generateSpec() { 
		val ret = '''
			«val objectName = context.objectName.toLowerCase»
			«val packageName = '''«context.testPackagePrefix»«objectName»«context.testPackageSuffix»'''»
			CREATE OR REPLACE PACKAGE «packageName» IS
			
				«IF context.generateComments»
					/* generated by utPLSQL for SQL Developer on «today» */

				«ENDIF»
				--%suite(«packageName»)
				«IF !context.suitePath.empty»
					--%suitepath(«context.suitePath»)
				«ENDIF»
				
				«FOR u : units»
					«val unit = u.toLowerCase»
					«IF context.numberOfTestsPerUnit > 1 && (context.objectType == "PACKAGE" || context.objectType == "TYPE")»
						--%context(«unit»)

					«ENDIF»
					«FOR i : 1 .. context.numberOfTestsPerUnit»
						--%test
						«IF context.disableTests»
							--%disabled
						«ENDIF»
						PROCEDURE «context.testUnitPrefix»«unit»«context.testUnitSuffix»«IF context.numberOfTestsPerUnit > 1»«i»«ENDIF»;

					«ENDFOR»
					«IF context.numberOfTestsPerUnit > 1 && (context.objectType == "PACKAGE" || context.objectType == "TYPE")»
						--%endcontext

					«ENDIF»
				«ENDFOR»
			END «packageName»;
			/
		'''
		return ret.replaceTabsWithSpaces
	}
	
	def generateBody() {
		val ret = '''
			«val objectName = context.objectName.toLowerCase»
			CREATE OR REPLACE PACKAGE BODY «context.testPackagePrefix»«objectName»«context.testPackageSuffix» IS
			
				«IF context.generateComments»
					/* generated by utPLSQL for SQL Developer on «today» */

				«ENDIF»
				«FOR u : units»
					«val unit = u.toLowerCase»
					«FOR i : 1 .. context.numberOfTestsPerUnit»
						«val procedureName = '''«context.testUnitPrefix»«unit»«context.testUnitSuffix»«IF context.numberOfTestsPerUnit > 1»«i»«ENDIF»'''»
						«IF context.generateComments»
							--
							-- test «unit»«IF context.numberOfTestsPerUnit > 0» case «i»: ...«ENDIF»
							--
						«ENDIF»
						PROCEDURE «procedureName» IS
							l_actual   INTEGER := 0;
							l_expected INTEGER := 1;
						BEGIN
							«IF context.generateComments»
								-- populate actual
								-- «objectName».«unit»;

								-- populate expected
								-- ...

								-- assert
							«ENDIF»
							ut.expect(l_actual).to_equal(l_expected);
						END «procedureName»;

					«ENDFOR»
				«ENDFOR»
			END «context.testPackagePrefix»«objectName»«context.testPackageSuffix»;
			/
		'''
		return ret.replaceTabsWithSpaces
	}
	
	def generate() '''
		«generateSpec»
		
		«generateBody»
	'''
}